function LDFTableSort(e,a){var t=$(e),r=t.attr("data-sortable");if("True"==r){var l=t.attr("data-field"),d="1";void 0!=t.attr("data-order")&&(d=t.attr("data-order"));var i=[];i[0]=l,i[1]=d,$.ajax({url:ldfTableOrderCallbackArray[a],dataType:"json",data:{orderValues:i},type:"POST",traditional:!0}).done(function(e){var r=-1*parseInt(d);t.attr("data-order",r),t.siblings().removeClass("sortAsc"),t.siblings().removeClass("sortDesc"),t.siblings().removeClass("active"),t.removeClass("sortAsc"),t.removeClass("sortDesc"),t.addClass(1==r?"sortAsc":"sortDesc"),t.addClass("active"),ldfTableCurPageAttribute[a]="1",LDFTableRenderBody(e,a)})}}function LDFTableRenderBody(e,a){var t=e.pageCount,r=e.rowCount;e=e.list_rows,ldfTableTBodyArray[a].empty(),0==$(e).length&&(row="<tr><td colspan='"+$(ldfTableHeaderArray[a]).length+"' style='text-align:center;'>Sem registos</td></tr>",ldfTableTBodyArray[a].append(row)),$.each(e,function(e,t){var r="<tr>";$.each(t.rowItems,function(e,t){$.each(ldfTableHeaderArray[a],function(e,a){if(t.itemColumnName==a.headerID&&0!=a.headerVisible){var l=t.itemValue;null!=l?null!=a.headerType&&-1!=a.headerType.indexOf("System.DateTime")&&(l=ToJavaScriptDate(l)):l="",null!=t.itemLink&&""!==t.itemLink&&(l='<a href="'+t.itemLink+'">'+l+"</a>");var d="False";d=0==a.headerMobile?"False":"True",r+="<td data-showMobile='"+d+"'>"+l+"</td>"}}),"true"==ldfTableAttributes[a].canEditRow&&(r+="<td><input type='button' value='Editar'/></td>"),"true"==ldfTableAttributes[a].canDeleteRow&&(r+="<td><input type='button' value='Remover'/></td>")}),r+="</tr>",ldfTableTBodyArray[a].append(r)}),LDFTableRenderPages(t,r,a)}function LDFTableRenderPages(e,a,t){var r=0,l="",d=0;for(ldfTableDivFooterArray[t].empty(),r=0;e>=r;r++)l=r+1==ldfTableCurPageAttribute[t]?"active":"",hidePage="",r+1>5&&(e>=r&&(hidePage="hidden",d+=1),r+1<=ldfTableCurPageAttribute[t]&&(""!=hidePage&&(d-=1),hidePage="")),itemPage="<li class='"+l+" "+hidePage+"'><a href='#' data-page='"+(r+1)+"' data-order='1'>"+(r+1)+"</a></li>",ldfTableDivFooterArray[t].append(itemPage);d>0&&(itemPage="<li><a href='#' data-page='0'>...</a></li>",ldfTableDivFooterArray[t].append(itemPage)),ldfTableDivFooterArray[t].parent().find(".row").remove(),itemPage="<div class='row' style='position: relative;width: 100%;margin-top: -10px;'><span class='rowCount'>Total: "+a+" Registos</span></div>",ldfTableDivFooterArray[t].parent().append(itemPage)}function LDFTableChangePage(e,a){var t=[];if(0==e){var r=$(ldfTableDivFooterArray[a])[0].id,l=0;$("#"+r+" li.hidden").each(function(){10>=l&&($(this).removeClass("hidden"),l++)}),0==$("#"+r+" li.hidden").length&&$("#"+r+" li").find("[data-page='0']").remove()}else{var d=ldfTableTHeaderArray[a].find("th.active");t[0]=d.attr("data-field"),t[1]=d.attr("data-order"),$.ajax({url:ldfTablePageCallbackArray[a],dataType:"json",data:{pageNumber:e,orderData:t},type:"POST",traditional:!0}).done(function(t){ldfTableCurPageAttribute[a]=e,LDFTableRenderBody(t,a)})}}function ToJavaScriptDate(e){var a,t,r,l;try{a=/Date\(([^)]+)\)/,t=a.exec(e),r=new Date(parseFloat(t[1])),l=r.getMonth()+1+"/"+r.getDate()+"/"+r.getFullYear()}catch(d){console.log("ldfTable | ToJavaScriptDate"+d.message),l=""}return l}function LDFTableResetCounter(e){clearInterval(ldfTableRefreshTimeObject[e])}function LDFTableRestartCounter(e){var a=ldfTableRefreshTime[e];ldfTableRefreshTimeObject[e]=setInterval(function(){UpdateRefreshHeader(e,a),window[ldfTableRefreshCallBackArray[e]]()},a)}function UpdateRefreshHeader(e,a){var t=new Date;t.setSeconds(t.getSeconds()+a/1e3);var r=(t.getHours()<=9?"0":"")+t.getHours(),l=(t.getMinutes()<=9?"0":"")+t.getMinutes(),d=(t.getSeconds()<=9?"0":"")+t.getSeconds();$("#autoRefresh"+e).children("span").html("Próxima atualização "+r+":"+l+":"+d)}$(".internalFooter").on("click","li > a",function(e){e.preventDefault()});
//# sourceMappingURL=data:application/json;base64,