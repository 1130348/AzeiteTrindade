function LDFTableSort(e,a){var r=$(e),t=r.attr("data-sortable");if("True"==t){var l=r.attr("data-field"),d="1";void 0!=r.attr("data-order")&&(d=r.attr("data-order"));var n=[];n[0]=l,n[1]=d;var i=ldfTableFilterDataArray[a];ldfTableOrderArray[a]=n,$.ajax({url:ldfTableLoadCallbackArray[a],dataType:"json",data:{pageNumber:1,orderData:n,filterData:i},type:"GET",traditional:!0,success:function(e){if(0==e.header.status)alert(e.header.message);else{var t=-1*parseInt(d);r.attr("data-order",t),r.siblings().removeClass("sortAsc"),r.siblings().removeClass("sortDesc"),r.siblings().removeClass("active"),r.removeClass("sortAsc"),r.removeClass("sortDesc"),r.addClass(1==t?"sortAsc":"sortDesc"),r.addClass("active"),ldfTableCurPageAttribute[a]="1",LDFTableRenderBody(e,a)}},error:function(e,a,r,t){LDFTableShowError(e,a,r,t)}})}}function LDFTableRenderBody(e,a){if(0==e.header.status)return void LDFTableShowError(e.header.message);var r=e.body.pageCount,t=e.body.rowCount,l=e.body.filters;e=e.body.list,ldfTableTBodyArray[a].empty(),"undefined"!=typeof l&&(ldfTableFilterDataArray[a]=l),ldfTableRowsArray[a]=e,0==$(e).length&&(row="<tr><td colspan='"+$(ldfTableHeaderArray[a]).length+"' style='text-align:center;'>Sem registos</td></tr>",ldfTableTBodyArray[a].append(row)),$.each(e,function(e,r){var t="<tr data-rowid='"+r.rowID+"' style='"+r.style+"'>";$.each(r.rowItems,function(e,r){$.each(ldfTableHeaderArray[a],function(e,a){if(r.itemColumnName==a.headerID&&0!=a.headerVisible){var l=r.itemValue;null==l&&(l=""),null!=r.itemLink&&""!==r.itemLink&&(l='<a href="'+r.itemLink+'">'+htmlEscape(l)+"</a>");var d="False";d=0==a.headerMobile?"False":"True";var n="";for(var i in a.headerStyle)a.headerStyle.hasOwnProperty(i)&&(n+=i+":"+a.headerStyle[i]+";");t+="<td data-showMobile='"+d+"' data-column='"+r.itemColumnName+"' data-editable='"+a.headerEditable+"' style='"+n+"'>"+l+"</td>"}})}),1==ldfTableAttributes[a].canEditRow&&(t+="<td><button type='button' class='btn btn-success ldfTableEditRow_"+a+"' value='Editar'><li class='fa fa-edit'></li> Editar</button></td>"),1==ldfTableAttributes[a].canDeleteRow&&(t+="<td><button type='button' class='btn btn-danger ldfTableRemoveRow_"+a+"' value='Remover'><li class='fa fa-remove'></li> Remover</button></td>"),t+="</tr>",ldfTableTBodyArray[a].append(t)}),InitRowInlineButtons(a),LDFTableRenderPages(r,t,a)}function LDFTableFilterTable(e,a){var r=JsonFields(e);$.ajax({url:ldfTableSearchCallbackArray[a],dataType:"JSON",data:{pageNumber:1,orderData:ldfTableOrderArray[a],filterData:r},type:"GET",traditional:!0,success:function(e){0==e.header.status?alert(e.header.message):(ldfTableCurPageAttribute[a]=1,LDFTableRenderBody(e,a))},error:function(e,a,r,t){LDFTableShowError(e,a,r,t)}})}function LDFTableAddItem(e,a){var r=JsonFields(e);$.ajax({url:ldfTableAddCallbackArray[a],dataType:"JSON",data:{pageNumber:ldfTableCurPageAttribute[a],orderData:ldfTableOrderArray[a],filterData:ldfTableFilterDataArray[a],insertData:r},type:"POST",traditional:!0,success:function(e){0==e.header.status?alert(e.header.message):LDFTableRenderBody(e,a)},error:function(e,a,r,t){LDFTableShowError(e,a,r,t)}})}function LDFTableRenderPages(e,a,r){var t=0,l="",d=0;for(ldfTableDivFooterArray[r].empty(),t=0;e>=t;t++)l=t+1==ldfTableCurPageAttribute[r]?"active":"",hidePage="",t+1>5&&(e>=t&&(hidePage="hidden",d+=1),t+1<=ldfTableCurPageAttribute[r]&&(""!=hidePage&&(d-=1),hidePage="")),itemPage="<li class='"+l+" "+hidePage+"'><a href='#' data-page='"+(t+1)+"' data-order='1'>"+(t+1)+"</a></li>",ldfTableDivFooterArray[r].append(itemPage);d>0&&(itemPage="<li><a href='#' data-page='0'>...</a></li>",ldfTableDivFooterArray[r].append(itemPage)),ldfTableDivFooterArray[r].parent().find(".row").remove(),itemPage="<div class='row' style='position: relative;width: 100%;margin-top: -10px;'><span class='rowCount'>Total: "+a+" Registos</span></div>",ldfTableDivFooterArray[r].parent().append(itemPage)}function LDFTableChangePage(e,a){var r=[];if(0==e){var t=$(ldfTableDivFooterArray[a])[0].id,l=0;$("#"+t+" li.hidden").each(function(){10>=l&&($(this).removeClass("hidden"),l++)}),0==$("#"+t+" li.hidden").length&&$("#"+t+" li").find("[data-page='0']").remove()}else{var d=ldfTableTHeaderArray[a].find("th.active");r[0]=d.attr("data-field");var n=d.attr("data-order");"undefined"!=typeof d.attr("data-order")&&(n=-1*n),r[1]=n;var i=ldfTableFilterDataArray[a];$.ajax({url:ldfTableLoadCallbackArray[a],dataType:"json",data:{pageNumber:e,orderData:ldfTableOrderArray[a],filterData:i},type:"GET",traditional:!0,success:function(r){0==r.header.status?alert(r.header.message):(ldfTableCurPageAttribute[a]=e,LDFTableRenderBody(r,a))},error:function(e,a,r,t){LDFTableShowError(e,a,r,t)}})}}function LDFTableResetCounter(e){clearInterval(ldfTableRefreshTimeObject[e])}function LDFTableRestartCounter(e){LDFTableResetCounter(e);var a=ldfTableRefreshTime[e];ldfTableRefreshTimeObject[e]=setInterval(function(){UpdateRefreshHeader(e,a),LDFAutoRefreshTable(e)},a)}function UpdateRefreshHeader(e,a){var r=new Date;r.setSeconds(r.getSeconds()+a/1e3);var t=(r.getHours()<=9?"0":"")+r.getHours(),l=(r.getMinutes()<=9?"0":"")+r.getMinutes(),d=(r.getSeconds()<=9?"0":"")+r.getSeconds();$("#autoRefresh"+e).children("span").html("Próxima atualização "+t+":"+l+":"+d)}function LDFAutoRefreshTable(e){LDFTableRestartCounter(e),$.ajax({url:ldfTableLoadCallbackArray[e],dataType:"json",data:{pageNumber:ldfTableCurPageAttribute[e],orderData:ldfTableOrderArray[e],filterData:ldfTableFilterDataArray[e]},type:"GET",traditional:!0,success:function(a){0==a.header.status?alert(a.header.message):LDFTableRenderBody(a,e)},error:function(e,a,r,t){LDFTableShowError(e,a,r,t)}})}function InitRowInlineButtons(e){$(".ldfTableEditRow_"+e).on("click",function(){var a=$(this),r=$(this).closest("tr");"true"==$(r).attr("data-editing")?SaveRow(e,a,r):EditRow(e,a,r)}),$(".ldfTableRemoveRow_"+e).on("click",function(){var a=$(this).closest("tr");$.ajax({url:ldfTableRemoveCallBackArray[e],dataType:"json",data:{rowID:a.attr("data-rowid")},type:"POST",traditional:!0,success:function(a){1==a?$.ajax({url:ldfTableLoadCallbackArray[e],dataType:"JSON",type:"GET",data:{pageNumber:ldfTableCurPageAttribute[e],orderData:ldfTableOrderArray[e],filterData:ldfTableFilterDataArray[e]},traditional:!0,success:function(a){0==a.header.status?alert(a.header.message):LDFTableRenderBody(a,e)},error:function(e,a,r,t){LDFTableShowError(e,a,r,t)}}):alert("Infelizmente não foi possível alterar o registo pretendido")},error:function(e,a,r,t){LDFTableShowError(e,a,r,t)}})})}function EditRow(e,a,r){$(r).attr("data-editing","true"),$(a).html("<li class='fa fa-save'></li> Gravar"),$(a).parent().append("<button type='button' class='btn btn-warning ldfTableCancelEditRow_"+e+"' value='Cancelar'><li class='fa fa-retweet'></li> Cancelar</button>"),InitRowInlineCancelButton(e);r.attr("data-rowid");$.each(ldfTableHeaderArray[e],function(e,a){1==a.headerEditable&&$.each($(r).children("td"),function(e,r){$(r).attr("data-column")==a.headerID&&($(r).attr("data-curValue",$(r).html()),$(this).html(RenderEditorField(a,$(r).html())),$(".ldfeditable.minimal").iCheck({checkboxClass:"icheckbox_flat-green"}))})})}function SaveRow(e,a,r){var t=new Object,l=new Object;$.each($(r).children("td[data-editable='true']"),function(a,r){$.each(ldfTableHeaderArray[e],function(e,a){if(a.headerID==$(r).attr("data-column")){var d=GetEditorFieldValue(a,r);"undefined"!=typeof d.id?(t[a.headerID]=d.id,l[a.headerID]=d.optionValue):t[a.headerID]=l[a.headerID]=d}})}),$.ajax({url:ldfTableEditCallBackArray[e],dataType:"json",data:{rowID:r.attr("data-rowid"),fields:JSON.stringify(t)},type:"POST",traditional:!0,success:function(t){0==t.header.status?alert(t.header.message):(r.attr("data-editing","false"),$(r).find("button.ldfTableCancelEditRow_"+e).remove(),$(a).html("<li class='fa fa-edit'></li> Editar"),$.each($(r).children("td[data-editable='true']"),function(a,r){$.each(ldfTableHeaderArray[e],function(e,a){a.headerID==$(r).attr("data-column")&&$(r).html(l[a.headerID])})}))},error:function(e,a,r,t){LDFTableShowError(e,a,r,t)}})}function InitRowInlineCancelButton(e){$(".ldfTableCancelEditRow_"+e).on("click",function(){var a=$(this),r=$(this).closest("tr");$.each($(r).children("td[data-editable='true']"),function(e,a){$(a).html($(a).attr("data-curValue")),$(a).attr("data-curValue","")}),a.remove();var t=$(r).find("button.ldfTableEditRow_"+e);$(t).html("<li class='fa fa-edit'></li> Editar"),r.attr("data-editing","false")})}function RenderEditorField(e,a){if(-1!=e.headerType.indexOf("String")||-1!=e.headerType.indexOf("Int"))return"<input type='text' class='form-control' value='"+a+"' />";if(-1!=e.headerType.indexOf("DateTime"))return"<input type='text' class='form-control' value='"+a+"' />";if(-1!=e.headerType.indexOf("SelectList")||-1!=e.headerType.indexOf("Boolean")){var r="";for(var t in e.headerEditContent)if(e.headerEditContent.hasOwnProperty(t)){var l="";a==e.headerEditContent[t]&&(l="selected"),r+="<option value='"+t+"' "+l+">"+e.headerEditContent[t]+"</option>"}return"<select class='form-control'>"+r+"</select>"}}function GetEditorFieldValue(e,a){if(-1!=e.headerType.indexOf("String")||-1!=e.headerType.indexOf("Int"))return $(a).children().val();if(-1!=e.headerType.indexOf("DateTime"))return $(a).children().val();if(-1!=e.headerType.indexOf("SelectList")||-1!=e.headerType.indexOf("Boolean")){var r={id:$(a).children().val(),optionValue:$("option:selected",$(a).children()).text()};return r}}function htmlEscape(e){return String(e).replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function ToJavaScriptDate(e){var a,r,t,l;try{a=/Date\(([^)]+)\)/,r=a.exec(e),t=new Date(parseFloat(r[1])),l=t.getMonth()+1+"/"+t.getDate()+"/"+t.getFullYear()}catch(d){console.log("ldfTable | ToJavaScriptDate"+d.message),l=""}return l}function LDFTableShowError(e,a,r,t){alert("De momento não é possível satisfazer o seu pedido")}function JsonFields(e){var a=e.split("&"),r="";return $.each(a,function(e,t){var l=a[e].split("=");""!=r&&(r+=","),r+="{'fieldName':'"+l[0]+"','fieldValue':'"+l[1]+"'}"}),""!=r&&(r="["+r+"]"),r}function LoadLDFTable(e){$.ajax({url:ldfTableLoadCallbackArray[e],dataType:"JSON",type:"GET",success:function(a){0==a.header.status?alert(a.header.message):LDFTableRenderBody(a,e)},error:function(e,a,r,t){LDFTableShowError(e,a,r,t)}})}if("undefined"==typeof ldfTableRowsArray)var ldfTableRowsArray=new Array;if("undefined"==typeof ldfTableOrderArray)var ldfTableOrderArray=new Array;if("undefined"==typeof ldfTableHeaderArray)var ldfTableHeaderArray=new Array;if("undefined"==typeof ldfTableLoadCallbackArray)var ldfTableLoadCallbackArray=new Array;if("undefined"==typeof ldfTableAddCallbackArray)var ldfTableAddCallbackArray=new Array;if("undefined"==typeof ldfTableSearchCallbackArray)var ldfTableSearchCallbackArray=new Array;if("undefined"==typeof ldfTableRemoveCallBackArray)var ldfTableRemoveCallBackArray=new Array;if("undefined"==typeof ldfTableEditCallBackArray)var ldfTableEditCallBackArray=new Array;if("undefined"==typeof ldfTableTBodyArray)var ldfTableTBodyArray=new Array;if("undefined"==typeof ldfTableDivFooterArray)var ldfTableDivFooterArray=new Array;if("undefined"==typeof ldfTableTHeaderArray)var ldfTableTHeaderArray=new Array;if("undefined"==typeof ldfTableTPageArray)var ldfTableTPageArray=new Array;if("undefined"==typeof ldfTableFilterDataArray)var ldfTableFilterDataArray=new Array;if("undefined"==typeof ldfTableAttributes)var ldfTableAttributes=new Array;if("undefined"==typeof ldfTableCurPageAttribute)var ldfTableCurPageAttribute=new Array;if("undefined"==typeof ldfTableRefreshTime)var ldfTableRefreshTime=new Array;if("undefined"==typeof ldfTableRefreshTimeObject)var ldfTableRefreshTimeObject=new Array;$(".internalFooter").on("click","li > a",function(e){e.preventDefault()});
//# sourceMappingURL=data:application/json;base64,