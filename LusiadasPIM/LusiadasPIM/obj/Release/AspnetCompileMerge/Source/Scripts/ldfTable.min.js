function LDFTableSort(e,a){var t=$(e),r=t.attr("data-sortable");if("True"==r){var l=t.attr("data-field"),d="1";void 0!=t.attr("data-order")&&(d=t.attr("data-order"));var n=[];n[0]=l,n[1]=d,$.ajax({url:ldfTableOrderCallbackArray[a],dataType:"json",data:{orderValues:n},type:"POST",traditional:!0}).done(function(e){var r=-1*parseInt(d);t.attr("data-order",r),t.siblings().removeClass("sortAsc"),t.siblings().removeClass("sortDesc"),t.siblings().removeClass("active"),t.removeClass("sortAsc"),t.removeClass("sortDesc"),t.addClass(1==r?"sortAsc":"sortDesc"),t.addClass("active"),ldfTableCurPageAttribute[a]="1",LDFTableRenderBody(e,a)})}}function LDFTableRenderBody(e,a){var t=e.pageCount,r=e.rowCount;e=e.list_rows,ldfTableTBodyArray[a].empty(),ldfTableRowsArray[a]=e,0==$(e).length&&(row="<tr><td colspan='"+$(ldfTableHeaderArray[a]).length+"' style='text-align:center;'>Sem registos</td></tr>",ldfTableTBodyArray[a].append(row)),$.each(e,function(e,t){var r="<tr data-rowid='"+t.rowID+"'>";$.each(t.rowItems,function(e,t){$.each(ldfTableHeaderArray[a],function(e,a){if(t.itemColumnName==a.headerID&&0!=a.headerVisible){var l=t.itemValue;null==l&&(l=""),null!=t.itemLink&&""!==t.itemLink&&(l='<a href="'+t.itemLink+'">'+l+"</a>");var d="False";d=0==a.headerMobile?"False":"True";var n="";for(var i in a.headerStyle)a.headerStyle.hasOwnProperty(i)&&(n+=i+":"+a.headerStyle[i]+";");r+="<td data-showMobile='"+d+"' data-column='"+t.itemColumnName+"' data-editable='"+a.headerEditable+"' style='"+n+"'>"+l+"</td>"}})}),1==ldfTableAttributes[a].canEditRow&&(r+="<td><input type='button' class='ldfTableEditRow_"+a+"' value='Editar'/></td>"),1==ldfTableAttributes[a].canDeleteRow&&(r+="<td><input type='button' class='ldfTableRemoveRow_"+a+"' value='Remover'/></td>"),r+="</tr>",ldfTableTBodyArray[a].append(r)}),InitRowInlineButtons(a),LDFTableRenderPages(t,r,a)}function LDFTableRenderPages(e,a,t){var r=0,l="",d=0;for(ldfTableDivFooterArray[t].empty(),r=0;e>=r;r++)l=r+1==ldfTableCurPageAttribute[t]?"active":"",hidePage="",r+1>5&&(e>=r&&(hidePage="hidden",d+=1),r+1<=ldfTableCurPageAttribute[t]&&(""!=hidePage&&(d-=1),hidePage="")),itemPage="<li class='"+l+" "+hidePage+"'><a href='#' data-page='"+(r+1)+"' data-order='1'>"+(r+1)+"</a></li>",ldfTableDivFooterArray[t].append(itemPage);d>0&&(itemPage="<li><a href='#' data-page='0'>...</a></li>",ldfTableDivFooterArray[t].append(itemPage)),ldfTableDivFooterArray[t].parent().find(".row").remove(),itemPage="<div class='row' style='position: relative;width: 100%;margin-top: -10px;'><span class='rowCount'>Total: "+a+" Registos</span></div>",ldfTableDivFooterArray[t].parent().append(itemPage)}function LDFTableChangePage(e,a){var t=[];if(0==e){var r=$(ldfTableDivFooterArray[a])[0].id,l=0;$("#"+r+" li.hidden").each(function(){10>=l&&($(this).removeClass("hidden"),l++)}),0==$("#"+r+" li.hidden").length&&$("#"+r+" li").find("[data-page='0']").remove()}else{var d=ldfTableTHeaderArray[a].find("th.active");t[0]=d.attr("data-field"),t[1]=d.attr("data-order"),$.ajax({url:ldfTablePageCallbackArray[a],dataType:"json",data:{pageNumber:e,orderData:t},type:"POST",traditional:!0}).done(function(t){ldfTableCurPageAttribute[a]=e,LDFTableRenderBody(t,a)})}}function ToJavaScriptDate(e){var a,t,r,l;try{a=/Date\(([^)]+)\)/,t=a.exec(e),r=new Date(parseFloat(t[1])),l=r.getMonth()+1+"/"+r.getDate()+"/"+r.getFullYear()}catch(d){console.log("ldfTable | ToJavaScriptDate"+d.message),l=""}return l}function LDFTableResetCounter(e){clearInterval(ldfTableRefreshTimeObject[e])}function LDFTableRestartCounter(e){var a=ldfTableRefreshTime[e];ldfTableRefreshTimeObject[e]=setInterval(function(){UpdateRefreshHeader(e,a),window[ldfTableRefreshCallBackArray[e]]()},a)}function UpdateRefreshHeader(e,a){var t=new Date;t.setSeconds(t.getSeconds()+a/1e3);var r=(t.getHours()<=9?"0":"")+t.getHours(),l=(t.getMinutes()<=9?"0":"")+t.getMinutes(),d=(t.getSeconds()<=9?"0":"")+t.getSeconds();$("#autoRefresh"+e).children("span").html("Próxima atualização "+r+":"+l+":"+d)}function InitRowInlineButtons(e){$(".ldfTableEditRow_"+e).on("click",function(){var a=$(this),t=$(this).closest("tr");"true"==$(t).attr("data-editing")?SaveRow(e,a,t):EditRow(e,a,t)}),$(".ldfTableRemoveRow_"+e).on("click",function(){console.log("Remove Row In Development")})}function EditRow(e,a,t){$(t).attr("data-editing","true"),a.val("Gravar"),$(a).parent().append("<input type='button' class='ldfTableCancelEditRow_"+e+"' value='Cancelar'/>"),InitRowInlineCancelButton(e);t.attr("data-rowid");$.each(ldfTableHeaderArray[e],function(e,a){1==a.headerEditable&&$.each($(t).children("td"),function(e,t){$(t).attr("data-column")==a.headerID&&($(t).attr("data-curValue",$(t).html()),$(this).html(RenderEditorField(a,$(t).html())),$(".ldfeditable.minimal").iCheck({checkboxClass:"icheckbox_flat-green"}))})})}function SaveRow(e,a,t){var r=new Object;$.each($(t).children("td[data-editable='true']"),function(a,t){$.each(ldfTableHeaderArray[e],function(e,a){a.headerID==$(t).attr("data-column")&&(r[a.headerID]=GetEditorFieldValue(a,t))})}),$.ajax({url:ldfTableEditCallBackArray[e],dataType:"json",data:{rowID:t.attr("data-rowid"),fields:JSON.stringify(r)},type:"POST",traditional:!0}).done(function(l){t.attr("data-editing","false"),$(t).find("input.ldfTableCancelEditRow_"+e).remove(),$(a).val("Editar"),$.each($(t).children("td[data-editable='true']"),function(a,t){$.each(ldfTableHeaderArray[e],function(e,a){a.headerID==$(t).attr("data-column")&&$(t).html(r[a.headerID])})})})}function InitRowInlineCancelButton(e){$(".ldfTableCancelEditRow_"+e).on("click",function(){var a=$(this),t=$(this).closest("tr");$.each($(t).children("td[data-editable='true']"),function(e,a){$(a).html($(a).attr("data-curValue")),$(a).attr("data-curValue","")}),a.remove();var r=$(t).find("input.ldfTableEditRow_"+e);r.val("Editar"),t.attr("data-editing","false")})}function RenderEditorField(e,a){if(-1!=e.headerType.indexOf("String"))return"<input type='text' class='form-control' value='"+a+"' />";if(-1!=e.headerType.indexOf("DateTime"))return"<input type='text' class='form-control' value='"+a+"' />";if(-1!=e.headerType.indexOf("SelectList")||-1!=e.headerType.indexOf("Boolean")){var t="";for(var r in e.headerEditContent)if(e.headerEditContent.hasOwnProperty(r)){var l="";a==e.headerEditContent[r]&&(l="selected"),t+="<option valu='"+r+"' "+l+">"+e.headerEditContent[r]+"</option>"}return"<select class='form-control'>"+t+"</select>"}}function GetEditorFieldValue(e,a){return-1!=e.headerType.indexOf("String")?$(a).children().val():-1!=e.headerType.indexOf("DateTime")?$(a).children().val():-1!=e.headerType.indexOf("SelectList")?(console.log($($(a).children()).innerHTML),console.log($($(a).children()).selectedOptions),$(a).children().val()):-1!=e.headerType.indexOf("Boolean")?(console.log($($(a).children()).innerHTML),console.log($($(a).children()).selectedOptions),$(a).children().val()):void 0}if($(".internalFooter").on("click","li > a",function(e){e.preventDefault()}),"undefined"==typeof ldfTableRowsArray)var ldfTableRowsArray=new Array;
//# sourceMappingURL=data:application/json;base64,